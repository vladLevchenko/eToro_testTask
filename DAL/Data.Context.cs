//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BillingEntities : DbContext
    {
        public BillingEntities()
            : base("name=BillingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<Deposit> Deposit { get; set; }
        public virtual DbSet<FundingType> FundingType { get; set; }
        public virtual DbSet<FundingTypeCurrency> FundingTypeCurrency { get; set; }
        public virtual DbSet<PaymentStatus> PaymentStatus { get; set; }
    
        public virtual ObjectResult<GetAvailDepositIdAndFundingTypeIdForTest_Result> GetAvailDepositIdAndFundingTypeIdForTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAvailDepositIdAndFundingTypeIdForTest_Result>("GetAvailDepositIdAndFundingTypeIdForTest");
        }
    
        public virtual ObjectResult<GetFundingTypeSupportedCurrencies_Result> GetFundingTypeSupportedCurrencies(Nullable<int> fundingTypeID)
        {
            var fundingTypeIDParameter = fundingTypeID.HasValue ?
                new ObjectParameter("FundingTypeID", fundingTypeID) :
                new ObjectParameter("FundingTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFundingTypeSupportedCurrencies_Result>("GetFundingTypeSupportedCurrencies", fundingTypeIDParameter);
        }
    
        public virtual ObjectResult<SetFundingTypeDeposits_Result> SetFundingTypeDeposits(Nullable<int> fundingTypeID, Nullable<int> depositID)
        {
            var fundingTypeIDParameter = fundingTypeID.HasValue ?
                new ObjectParameter("FundingTypeID", fundingTypeID) :
                new ObjectParameter("FundingTypeID", typeof(int));
    
            var depositIDParameter = depositID.HasValue ?
                new ObjectParameter("DepositID", depositID) :
                new ObjectParameter("DepositID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SetFundingTypeDeposits_Result>("SetFundingTypeDeposits", fundingTypeIDParameter, depositIDParameter);
        }
    }
}
